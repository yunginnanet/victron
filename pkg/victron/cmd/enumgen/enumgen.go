package main

import (
	"bufio"
	"fmt"
	"os"
	"os/exec"
	"strings"
	"unicode"
)

func processProductID(name string) string {
	result := strings.Builder{}
	var lastRune rune
	for i, r := range name {
		if i == 0 {
			lastRune = unicode.ToLower(r)
			result.WriteRune(lastRune)
			continue
		}
		if unicode.IsUpper(r) && unicode.IsLower(lastRune) {
			result.WriteRune('_')
		}
		result.WriteRune(unicode.ToLower(r))
		lastRune = r
	}
	return result.String()
}

func writePIDs(PIDs map[string]string) {
	enumFile, err := os.Create("product_enum.go")
	if err != nil {
		panic(err)
	}
	defer func() {
		if err = enumFile.Close(); err != nil {
			panic(err)
		}
	}()

	write := func(s string, args ...any) {
		if _, err = enumFile.WriteString(fmt.Sprintf(s, args...)); err != nil {
			panic(err)
		}
	}

	write("package victron\n\n")
	write("//go:generate go run cmd/enumgen/enumgen.go\n")
	write("// Code generated by enumgen.go; DO NOT EDIT.\n\n")
	write("var ProductIDToString = map[ProductID]string{\n")
	for constName, stringified := range PIDs {
		write("\t%s:\t\"%s\",\n", constName, stringified)
	}
	write("\n}\n\n")

	write("var StringToProductID = map[string]ProductID{\n")
	for constName, stringified := range PIDs {
		write("\t\"%s\":\t%s,\n", stringified, constName)
	}
	write("\n}\n")
}

func readPIDs() map[string]string {
	f, err := os.Open("product.go")
	if err != nil {
		panic(err)
	}
	defer func() {
		if err = f.Close(); err != nil {
			panic(err)
		}
	}()

	xerox := bufio.NewScanner(f)
	var insideConstBlock = false

	PIDs := make(map[string]string)

	for xerox.Scan() {
		line := strings.TrimSpace(xerox.Text())
		if line == "// BEGIN PRODUCT IDS" {
			insideConstBlock = true
			continue
		}
		if line == "// END PRODUCT IDS" {
			break
		}
		if insideConstBlock && strings.HasPrefix(line, "PID") {
			fields := strings.Fields(line)
			if len(fields) < 3 {
				continue
			}
			constName := fields[0]
			stringified := processProductID(constName[3:]) // Remove PID prefix
			PIDs[constName] = stringified
		}
	}

	return PIDs
}

func main() {
	writePIDs(readPIDs())
	cmd := exec.Command("gofmt", "-w", "product_enum.go")
	cmd.Stdout = os.Stdout
	cmd.Stderr = os.Stderr
	if err := cmd.Run(); err != nil {
		panic(err)
	}
}
